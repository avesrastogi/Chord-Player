{"id":"../node_modules/@tonaljs/chord-dictionary/dist/index.es.js","dependencies":[{"name":"/home/avni/Chord-Player/node_modules/@tonaljs/chord-dictionary/dist/index.es.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/avni/Chord-Player/package.json","includedInParent":true,"mtime":1600179919608},{"name":"/home/avni/Chord-Player/node_modules/@tonaljs/chord-dictionary/package.json","includedInParent":true,"mtime":1600179919480},{"name":"@tonaljs/chord-type","loc":{"line":2,"column":24},"parent":"/home/avni/Chord-Player/node_modules/@tonaljs/chord-dictionary/dist/index.es.js","resolved":"/home/avni/Chord-Player/node_modules/@tonaljs/chord-type/dist/index.es.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {};\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return _chordType.default;\n  }\n});\n\nvar _chordType = _interopRequireWildcard(require(\"@tonaljs/chord-type\"));\n\nObject.keys(_chordType).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _chordType[key];\n    }\n  });\n});\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"feba5b75e1ce059ac83590ee30e854d5","cacheData":{"env":{}}}